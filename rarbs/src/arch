#!/bin/sh
pkgdir="src/pkg"
LOG_FILE="log.log"
ERR_FILE="err.log"
log=true
while getopts ":a:r:b:p:h:v" o; do case "${o}" in
	h) printf "Optional arguments for custom use:\\n  -r: Dotfiles repository (local file or url)\\n  -p: Dependencies and programs csv (local file or url)\\n  -a: AUR helper (must have pacman-like syntax)\\n  -h: Show this message\\n" && exit 1 ;;
	r) dotfilesrepo=${OPTARG} && git ls-remote "$dotfilesrepo" || exit 1 ;;
	b) repobranch=${OPTARG} ;;
	p) progsfile=${OPTARG} ;;
	a) aurhelper=${OPTARG} ;;
	v) log=true ;;
	*) printf "Invalid option: -%s\\n" "$OPTARG" && exit 1 ;;
esac done

# check if laptop
[ -d "/sys/class/power_supply/BAT0" ] && LAPTOP=true
[ -z "$dotfilesrepo" ] && dotfilesrepo="https://github.com/romariorobby/voidrice.git"
if [ -z "$progsfile" ]; then
	[ -f "$pkgdir/progs-arch.csv" ] && progsfile="$pkgdir/progs-arch.csv" || progsfile="https://raw.githubusercontent.com/romariorobby/RARBS/master/src/pkg/progs-arch.csv"
fi
if [ -z "$progsallfile" ]; then
	[ -f "src/pkg/progs-all.csv" ] && progsallfile="src/pkg/progs-all.csv" || progsallfile="https://raw.githubusercontent.com/romariorobby/RARBS/master/src/pkg/progs-all.csv"
fi
[ -z "$aurhelper" ] && aurhelper="paru"
[ -z "$repobranch" ] && repobranch="master"
dialog(){
  if "${LAPTOP}"; then
		backtitle="BAT: $(cat /sys/class/power_supply/BAT0/capacity)%"
    /usr/bin/dialog --colors --backtitle "${backtitle}" "$@"
	else
    /usr/bin/dialog --colors "$@"
	fi
}
error() { printf "%s\n" "$1" >&2; exit 1;}

finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	dialog --title "All done!" --msgbox "Congrats! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	}

load() {
  {
    int='1'
    while ps | grep "${pid}" &>/dev/null; do
      sleep "${pri}"
      echo "${int}"
      if [ "${int}" -lt 100 ]; then
        int="$((int + 1))"
      fi
    done

    echo 100
    sleep 1
  } | dialog --title "${title}" --gauge "${msg}" 9 79 0
}

log() {
  [ "$log" == false ] && return 1
  if [ -n "$1" ]; then
    # Manual logging
    message="$1"
    echo "[$(date '+%H:%M:%S')]: ${message}" >>"${LOG_FILE}"
  else
    # Command output
    echo "*** COMMAND OUTPUT ***" >>"${LOG_FILE}"
    while read -r message; do
      echo "${message}" >>"${LOG_FILE}"
    done
    echo "*** END OF COMMAND OUTPUT ***" >>"${LOG_FILE}"
  fi
}

refreshkeys() { \
	case "$(readlink -f /sbin/init)" in
		*systemd* )
			dialog --infobox "Refreshing Arch Keyring..." 4 40
			pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
			;;
		*)
			dialog --infobox "Enabling Arch Repositories..." 4 40
			pacman --noconfirm --needed -S artix-keyring artix-archlinux-support >/dev/null 2>&1
			for repo in extra community; do
				grep -q "^\[$repo\]" /etc/pacman.conf ||
					echo "[$repo]
Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
			done
			pacman -Sy >/dev/null 2>&1
			pacman-key --populate archlinux >/dev/null 2>&1
			;;
	esac ;}

installpkg(){ pacman --noconfirm --needed -S "$1" >/dev/null 2>>${ERR_FILE};}

back="BAT: $(cat /sys/class/power_supply/BAT0/capacity)%"
welcomemsg() { \
	dialog --title "Welcome!" --msgbox "Welcome to Romario's Auto-Rice Bootstrapping Script!\\n\\nThis script will automatically install a fully-featured Linux desktop, which I use as my main machine.\\n\\n-Romario" 10 60
	dialog --title "Important Note!" --yes-label "All ready!" --no-label "Return..." --yesno "Be sure the computer you are using has current pacman updates and refreshed Arch keyrings.\\n\\nIf it does not, the installation of some programs might fail." 8 70
	}

##

maininstall() { # Installs all needed programs from main repo.
	status="not installed"
	echo "$pacinstalled" | grep -q "^$1$" && status="installed"
	( 
		[ "$status" != "installed" ] && installpkg "$1" || sleep 1s
	) & pid=$! pri=0.2 title="Main Installation" msg="[$n/$total] Installing $1 (${status})\n\n $2\n\Z1> \Z2\`pacman -S $1\`\Zn" load
}

# TODO: Seems have problem wtih `cd` need to go back to this file. or create temporary file for this
aurmanualinstall() { # Installs $1 manually. Used only for AUR helper here.
	# Should be run after repodir is created and var is set.
	dialog --infobox "Preparing for installing \"$1\", an AUR helper..." 4 50
	_dir="$PWD"

	(
		sudo -u "$name" mkdir -p "$repodir/$1"
	) & pid=$! pri=0.2 title="RARBS Installation" msg="Creating Directory\n\n blablaalb\n\Z1> \Z2\`mkdir -p $repodir/$1 \`\Zn" load
	(
		sudo -u "$name" git -C "$repodir/$1" clone --depth 1 "https://aur.archlinux.org/$1.git" "$repodir/$1" >/dev/null 2>&1 || \
			{ cd "$repodir/$1" || return 1 ; sudo -u "$name" git pull --force origin master >/dev/null 2>&1;}
	) & pid=$! pri=0.2 title="RARBS Installation" msg="Cloning $aurhelper.git\n\n \n\Z1> \Z2\`git clone https://aur.archlinux.org/$1.git\`\Zn" load
		cd "$repodir/$1"
	(
		sudo -u "$name" -D "$repodir/$1" makepkg --noconfirm -si >/dev/null 2>&1 || return 1
	) & pid=$! pri=0.2 title="RARBS Installation" msg="Installing $aurhelper\n\n \n\Z1> \Z2\`makepkg -si\`\Zn" load
	cd $_dir
}

aurinstall() { \
	status="not installed"
	echo "$pacinstalled" | grep -q "^$1$" && status="installed"
	( 
		[ "$status" != "installed" ] && sudo -u "$name" $aurhelper -S --noconfirm "$1" >/dev/null 2>&1 || sleep 1s
	) & pid=$! pri=0.2 title="AUR Installation" msg="[$n/$total] Installing $1\n\n $2\n\Z1> \Z2\`$aurhelper -S $1\`\Zn " load
}

pipinstall() { \
	[ -x "$(command -v "pip3")" ] || installpkg python-pip 2>>${ERR_FILE}
	( 
		yes | pip3 install "$1" >/dev/null 2>>${ERR_FILE}
	) & pid=$! pri=0.2 title="PIP Installation" msg="[$n/$total] Installing $1\n\n $2 " load
}

# TODO: Untested func
npminstall() { \
	return 1
	[ -x "$(command -v "npm")" ] || installpkg npm >/dev/null 2>&1
	# global installed seems dont have permission for regular user
	(
		yes | npm install -g "$1" >/dev/null 2>&1
	) & pid=$! pri=0.2 title="NPM Installation" msg="[$n/$total] Installing $1\n\n $2 " load
	}

installationloop() { \
	# TODO: How to clean this progsfile sorting
	# Sanity check
	([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv && sed -i '/^#/d' /tmp/progs.csv) | sed -e '/^#/d' /tmp/progs.csv || curl -Ls "$progsfile" | sed '/^#/d' > /tmp/progs.csv
	# include progs-all.csv into progs.csv
	([ -f "$progsallfile" ] && sed '/^#/d' "$progsallfile" >> /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^#/d' >> /tmp/progs.csv

	total=$(wc -l < /tmp/progs.csv)
	aurinstalled=$(pacman -Qqm)
	pacinstalled=$(pacman -Qq | grep -v "$aurinstalled")
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed -E "s/(^\"|\"$)//g")"
		case "$tag" in
			"A") aurinstall "$program" "$comment" ;;
			"G") gitmakeinstall "$program" "$comment" ;;
			"P") pipinstall "$program" "$comment" ;;
			"N") npminstall "$program" "$comment" ;;
			*) maininstall "$program" "$comment" ;;
		esac
	done < /tmp/progs.csv ;}

systembeepoff() { dialog --infobox "Getting rid of that retarded error beep sound..." 10 50
	rmmod pcspkr
	echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf ;}

getuserandpass() { \
	# Prompts user for new username an password.
	name=$(dialog --inputbox "First, please enter a name for the user account." 10 60 3>&1 1>&2 2>&3 3>&1) || exit 1
	while ! echo "$name" | grep -q "^[a-z_][a-z0-9_-]*$"; do
		name=$(dialog --no-cancel --inputbox "Username not valid. Give a username beginning with a letter, with only lowercase letters, - or _." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
	pass1=$(dialog --no-cancel --passwordbox "Enter a password for that user." 10 60 3>&1 1>&2 2>&3 3>&1)
	pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	while ! [ "$pass1" = "$pass2" ]; do
		unset pass2
		pass1=$(dialog --no-cancel --passwordbox "Passwords do not match.\\n\\nEnter password again." 10 60 3>&1 1>&2 2>&3 3>&1)
		pass2=$(dialog --no-cancel --passwordbox "Retype password." 10 60 3>&1 1>&2 2>&3 3>&1)
	done
}

usercheck() { \
	! { id -u "$name" >/dev/null 2>&1; } ||
	dialog --title "WARNING!" --yes-label "CONTINUE" --no-label "No wait..." --yesno "The user \`$name\` already exists on this system. RARBS can install for a user already existing, but it will \\Zboverwrite\\Zn any conflicting settings/dotfiles on the user account.\\n\\nRARBS will \\Zbnot\\Zn overwrite your user files, documents, videos, etc., so don't worry about that, but only click <CONTINUE> if you don't mind your settings being overwritten.\\n\\nNote also that RARBS will change $name's password to the one you just gave." 14 70
	}

adduserandpass() { \
	# Adds user `$name` with password $pass1.
	dialog --infobox "Adding user \"$name\"..." 4 50
	useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
	usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
	export repodir="/home/$name/.local/src"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
	echo "$name:$pass1" | chpasswd
	unset pass1 pass2 ;}

newperms() { # Set special sudoers settings for install (or after).
	sed -i "/#RARBS/d" /etc/sudoers
	echo "$* #RARBS" >> /etc/sudoers ;}


finalize(){ \
	dialog --infobox "Preparing welcome message..." 4 50
	dialog --title "All done!" --msgbox "Congrats! Provided there were no hidden errors, the script completed successfully and all the programs and configuration files should be in place.\\n\\nTo run the new graphical environment, log out and log back in as your new user, then run the command \"startx\" to start the graphical environment (it will start automatically in tty1).\\n\\n.t Romario" 12 80
	}

log "*** Running Script ***"
[ "$(basename $0)" == "arch" ] && error "You cannot run this file directly! run \`rarbs\` instead"

# Check if user is root on Arch distro. Install dialog.
pacman --noconfirm --needed -Sy dialog || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"

# Theming dialog
cp -f dialogrc /root/.dialogrc

# Welcome user and pick dotfiles.
welcomemsg || error "User exited."

# Get and verify username and password.
getuserandpass || error "User exited."

usercheck || error "User Exited"

refreshkeys || error "Error automatically refreshing Arch keyring. Consider doing so manually."

for x in curl ca-certificates base-devel git ntp zsh; do
	dialog --title "RARBS Installation" --infobox "Installing \`$x\` which is required to install and configure other programs." 5 70
	installpkg "$x"
done

dialog --title "RARBS Installation" --infobox "Synchronizing system time to ensure successful and secure installation of software..." 4 70
ntpdate 0.id.pool.ntp.org >/dev/null 2>&1

[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case

adduserandpass || error "Error adding username and/or password."

# Allow user to run sudo without password. Since AUR programs must be installed
# in a fakeroot environment, this is required for all builds with AUR.
newperms "%wheel ALL=(ALL) NOPASSWD: ALL"

# Make pacman colorful, concurrent downloads and Pacman eye-candy.
grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;/^#MAKEFLAGS/s/^#//" /etc/makepkg.conf

aurmanualinstall paru-bin || error "Failed to install AUR helper."

# The command that does all the installing. Reads the progs.csv file and
# installs each needed program the way required. Be sure to run this only after
# the user has been created and has priviledges to run sudo without a password
# and all build dependencies are installed.
installationloop 2>>${ERR_FILE}


# Make zsh the default shell for the user.
chsh -s /bin/zsh "$name" >/dev/null 2>&1
sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"
sudo -u "$name" mkdir -p "/home/$name/.config/abook/"
sudo -u "$name" mkdir -p "/home/$name/.config/mpd/playlists/"

# Artix Only
# dbus UUID must be generated for Artix runit.
dbus-uuidgen > /var/lib/dbus/machine-id

# Use system notifications for Brave on Artix
echo "export \$(dbus-launch)" > /etc/profile.d/dbus.sh

# Tap to click
[ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
	# Enable left mouse button by tapping
	Option "Tapping" "on"
EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf

# This line, overwriting the `newperms` command above will allow the user to run
# serveral important commands, `shutdown`, `reboot`, updating, etc. without a password.
newperms "%wheel ALL=(ALL) ALL #RARBS
%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/wifi-menu,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/packer -Syu,/usr/bin/packer -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/rc-service NetworkManager restart,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/paru,/usr/bin/pacman -Syyuw --noconfirm"

log "*** End Script ***"
log "******************"

finalize
clear
